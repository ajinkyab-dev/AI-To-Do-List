import { useEffect, useMemo, useState } from 'react';
import { Alert, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, Typography } from '@mui/material';

const formatTaskLine = (task, index) => {
  const cleanedDescription = (() => {
    const raw = (task.description || task.statusSummary || '').trim();
    if (!raw) {
      return '';
    }
    const withoutPrefix = raw.replace(/^\d+\.\s*/, '');
    if (withoutPrefix.localeCompare(task.title || '', undefined, { sensitivity: 'accent' }) === 0) {
      return '';
    }
    return withoutPrefix;
  })();

  const hours = (task.timeLog?.trim() || task.hours?.trim() || '');

  let line = `${index + 1}. ${task.title}`;

  if (cleanedDescription) {
    line += ` - ${cleanedDescription}`;
  }

  if (hours) {
    const descriptionLower = cleanedDescription.toLowerCase();
    const hoursLower = hours.toLowerCase();
    const descriptionHasTime = descriptionLower.includes(hoursLower) || descriptionLower.includes('time spent');

    if (!descriptionHasTime) {
      const connector = cleanedDescription ? (/[.!?]$/.test(cleanedDescription) ? ' ' : '. ') : ' - ';
      line += `${connector}Time spent: ${hours}`;
    }
  }

  return line;
};

const buildSection = (title, tasks) => {
  const header = `${title}:`;
  if (!tasks?.length) {
    return `${header}\nNone`;
  }
  const lines = tasks.map((task, index) => formatTaskLine(task, index));
  return `${header}\n${lines.join('\n')}`;
};

export default function StatusReportDialog({ open, onClose, report, loading, provider, error }) {
  const [copyState, setCopyState] = useState('idle');
  const derivedProvider = provider || report?.provider || 'Heuristic engine';
  const model = report?.model;

  const summaryText = useMemo(() => {
    const completedTasks = report?.completedTasks || [];
    const inProgressTasks = report?.inProgressTasks || [];
    const generatedDate = (() => {
      const source = report?.generatedAt;
      const date = source ? new Date(source) : new Date();
      return Number.isNaN(date.getTime()) ? new Date() : date;
    })();
    const formattedDate = new Intl.DateTimeFormat(undefined, {
      dateStyle: 'medium',
      timeStyle: 'short'
    }).format(generatedDate);
    const sections = [
      `Generated on: ${formattedDate}`,
      buildSection('Completed', completedTasks),
      buildSection('In Progress', inProgressTasks)
    ];
    return sections.join('\n\n');
  }, [report?.completedTasks, report?.inProgressTasks, report?.generatedAt]);

  const hasSummary = Boolean(summaryText.trim());

  useEffect(() => {
    if (!open) {
      setCopyState('idle');
    }
  }, [open]);

  const canCopy = hasSummary && typeof navigator !== 'undefined' && navigator.clipboard?.writeText;

  const handleCopyAll = async () => {
    if (!canCopy) {
      return;
    }

    try {
      setCopyState('copying');
      await navigator.clipboard.writeText(summaryText);
      setCopyState('copied');
      setTimeout(() => setCopyState('idle'), 2000);
    } catch (copyError) {
      console.warn('Failed to copy status updates', copyError);
      setCopyState('error');
      setTimeout(() => setCopyState('idle'), 3000);
    }
  };

  const copyLabel = copyState === 'copied' ? 'Copied!' : copyState === 'error' ? 'Copy failed' : 'Copy all';

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Status update</DialogTitle>
      <DialogContent dividers>
        {loading ? (
          <Typography variant="body2" color="text.secondary">Generating status report...</Typography>
        ) : error ? (
          <Typography color="error">{error}</Typography>
        ) : hasSummary ? (
          <Stack spacing={2.5}>
            <Typography variant="body2" color="text.secondary">
              Generated by: {derivedProvider}
              {model ? ` | Model: ${model}` : ''}
            </Typography>
            {report?.warning ? <Alert severity="warning">{report.warning}</Alert> : null}
            <Typography component="pre" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit', m: 0 }}>
              {summaryText}
            </Typography>
          </Stack>
        ) : (
          <Typography variant="body2" color="text.secondary">
            No completed or in-progress tasks to report yet.
          </Typography>
        )}
      </DialogContent>
      <DialogActions>
        <Button onClick={handleCopyAll} variant="contained" color="secondary" disabled={!canCopy || copyState === 'copying'}>
          {copyLabel}
        </Button>
        <Button onClick={onClose}>Close</Button>
      </DialogActions>
    </Dialog>
  );
}
