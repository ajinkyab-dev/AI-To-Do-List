import { useEffect, useMemo, useState } from 'react';
import { Alert, Box, Button, Dialog, DialogActions, DialogContent, DialogTitle, Stack, Typography } from '@mui/material';
import CircularProgress from '@mui/material/CircularProgress';

export default function StatusReportDialog({ open, onClose, report, loading, provider, error }) {
  const [copyState, setCopyState] = useState('idle');
  const updates = report?.updates || [];
  const derivedProvider = provider || report?.provider || 'Heuristic engine';
  const model = report?.model;

  useEffect(() => {
    if (!open) {
      setCopyState('idle');
    }
  }, [open]);

  const combinedUpdates = useMemo(() => updates.join('\n'), [updates]);
  const canCopy = Boolean(combinedUpdates) && typeof navigator !== 'undefined' && navigator.clipboard?.writeText;

  const handleCopyAll = async () => {
    if (!canCopy) {
      return;
    }

    try {
      setCopyState('copying');
      await navigator.clipboard.writeText(combinedUpdates);
      setCopyState('copied');
      setTimeout(() => setCopyState('idle'), 2000);
    } catch (copyError) {
      console.warn('Failed to copy status updates', copyError);
      setCopyState('error');
      setTimeout(() => setCopyState('idle'), 3000);
    }
  };

  const copyLabel = copyState === 'copied' ? 'Copied!' : copyState === 'error' ? 'Copy failed' : 'Copy all';

  return (
    <Dialog open={open} onClose={onClose} fullWidth maxWidth="sm">
      <DialogTitle>Status update</DialogTitle>
      <DialogContent dividers>
        {loading ? (
          <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
            <CircularProgress />
          </Box>
        ) : error ? (
          <Typography color="error">{error}</Typography>
        ) : updates.length ? (
          <Stack spacing={2.5}>
            <Typography variant="body2" color="text.secondary">
              Generated by: {derivedProvider}
              {model ? ` | Model: ${model}` : ''}
            </Typography>
            {report?.warning ? <Alert severity="warning">{report.warning}</Alert> : null}
            <Stack spacing={1.5}>
              {updates.map((line, index) => (
                <Typography key={index} component="pre" sx={{ whiteSpace: 'pre-wrap', fontFamily: 'inherit', m: 0 }}>
                  {line}
                </Typography>
              ))}
            </Stack>
          </Stack>
        ) : (
          <Typography variant="body2" color="text.secondary">
            Generate a status report to view details here.
          </Typography>
        )}
      </DialogContent>
      <DialogActions>
        {updates.length ? (
          <Button onClick={handleCopyAll} variant="contained" color="secondary" disabled={!canCopy || copyState === 'copying'}>
            {copyLabel}
          </Button>
        ) : null}
        <Button onClick={onClose}>Close</Button>
      </DialogActions>
    </Dialog>
  );
}
